// ************************************************************************ //
// WARNING
// -------
// This file is generated by the Type Library importer or Type Library Editor.
// Barring syntax errors, the Editor will parse modifications made to the file.
// However, when applying changes via the Editor this file will be regenerated
// and comments or formatting changes will be lost.
// ************************************************************************ //
// File generated on 02.07.2024 11:26:32 (- $Rev: 12980 $, 1725802031).

[
  uuid(8C69BB55-8F17-4946-A0AD-4E9DF680F85A),
  version(1.0),
  helpstring("MITSU 1-F driver for 1C"),
  control

]
library MitsuLib
{

  importlib("stdole2.tlb");

  interface IMitsu1C;
  coclass Mitsu1C;
  interface IMitsu1C11;
  coclass Mitsu1C11;
  interface IMitsu1C17;
  coclass Mitsu1C17;
  interface IMitsu1C22;
  coclass Mitsu1C22;
  interface IMitsu1C30;
  coclass Mitsu1C30;


  [
    uuid(73B0EE0E-73F2-46EA-84AA-B47700462C1F),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IMitsu1C: IDispatch
  {
    [id(0x000000C9), helpstring("ѕолучитьЌомер¬ерсии")]
    HRESULT _stdcall GetVersion([out, retval] BSTR* Value);
    [id(0x000000CA), helpstring("ѕолучитьќшибку")]
    HRESULT _stdcall GetLastError([out] BSTR* ErrorDescription, [out, retval] long* Value);
    [id(0x000000CC), helpstring("ќтключить")]
    HRESULT _stdcall Close([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CD), helpstring("ЌапечататьќтчетЅез√ашени€")]
    HRESULT _stdcall PrintXReport([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CE), helpstring("Ќапечататьќтчет—√ашением")]
    HRESULT _stdcall PrintZReport([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CF), helpstring("Ќапечатать„ек¬несени€¬ыемки")]
    HRESULT _stdcall CashInOutcome([in] BSTR DeviceID, [in] double Amount, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D0), helpstring("ќткрыть„ек")]
    HRESULT _stdcall OpenCheck([in] BSTR DeviceID, [in] VARIANT_BOOL IsFiscalCheck, [in] VARIANT_BOOL IsReturnCheck, [in] VARIANT_BOOL CancelOpenedCheck, [out] long* CheckNumber, [out] long* SessionNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D1), helpstring("Ќапечатать‘иск—троку")]
    HRESULT _stdcall PrintFiscalString([in] BSTR DeviceID, [in] BSTR Name, [in] double Quantity, [in] double Price, [in] double Amount, [in] long Department, [in] float Tax, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D2), helpstring("«акрыть„ек")]
    HRESULT _stdcall CloseCheck([in] BSTR DeviceID, [in] double Cash, [in] double PayByCard, [in] double PayByCredit, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D3), helpstring("ќтменить„ек")]
    HRESULT _stdcall CancelCheck([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D4), helpstring("ЌапечататьЌефиск—троку")]
    HRESULT _stdcall PrintNonFiscalString([in] BSTR DeviceID, [in] BSTR TextString, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D5), helpstring("“ест”стройства")]
    HRESULT _stdcall DeviceTest([in]  IDispatch* ValuesArray, [out] BSTR* AdditionalDescription, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CB), helpstring("ѕодключить")]
    HRESULT _stdcall Open([in]  IDispatch* ValuesArray, [out] BSTR* DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D6), helpstring("ѕроверить—осто€ниеѕечати")]
    HRESULT _stdcall CheckPrintingStatus([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D7), helpstring("ѕродолжитьѕечать")]
    HRESULT _stdcall ContinuePrinting([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D8), helpstring("ќткрытьƒенежныйящик")]
    HRESULT _stdcall OpenCashDrawer([in] BSTR DeviceID, [in] long CashDrawerID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D9), helpstring("«агрузитьЋоготип")]
    HRESULT _stdcall LoadLogo([in]  IDispatch* ValuesArray, [in] BSTR LogoFileName, [in] VARIANT_BOOL CenterLogo, [out] long* LogoSize, [out] BSTR* AdditionalDescription, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DA), helpstring("ќткрыть—мену")]
    HRESULT _stdcall OpenSession([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DB), helpstring("”правление”стройством")]
    HRESULT _stdcall DeviceControl([in] BSTR DeviceID, [in] BSTR TxData, [out] BSTR* RxData, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DC), helpstring("”правление”стройством’екс")]
    HRESULT _stdcall DeviceControlHEX([in] BSTR DeviceID, [in] BSTR TxData, [out] BSTR* RxData, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000DD), helpstring("—кидкаЌа„ек")]
    HRESULT _stdcall DiscountOnCheck([out, retval] double* Value);
    [propput, id(0x000000DD), helpstring("—кидкаЌа„ек")]
    HRESULT _stdcall DiscountOnCheck([in] double Value);
    [propget, id(0x000000DE), helpstring("“ипќплаты4")]
    HRESULT _stdcall PayType4([out, retval] double* Value);
    [propput, id(0x000000DE), helpstring("“ипќплаты4")]
    HRESULT _stdcall PayType4([in] double Value);
  };

  [
    uuid(7B5D3811-BAA3-4714-AAE5-68469572E5D2),
    version(1.0),
    helpstring("Dispatch interface for DrvFR1C11 Object"),
    dual,
    oleautomation
  ]
  interface IMitsu1C11: IDispatch
  {
    [id(0x000000C9), helpstring("ѕолучитьЌомер¬ерсии")]
    HRESULT _stdcall GetVersion([out, retval] BSTR* Value);
    [id(0x000000CA), helpstring("ѕолучитьќписание")]
    HRESULT _stdcall GetDescription([out] BSTR* Name, [out] BSTR* Description, [out] BSTR* EquipmentType, [out] long* InterfaceRevision, [out] VARIANT_BOOL* IntegrationLibrary, [out] VARIANT_BOOL* MainDriverInstalled, [out] BSTR* GetDownloadURL, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CB), helpstring("ѕолучитьќшибку")]
    HRESULT _stdcall GetLastError([out] BSTR* ErrorDescription, [out, retval] long* Value);
    [id(0x000000CC), helpstring("ѕолучитьѕараметры")]
    HRESULT _stdcall GetParameters([out] BSTR* TableParameters, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CD), helpstring("”становитьѕараметр")]
    HRESULT _stdcall SetParameter([in] BSTR Name, [in] VARIANT Value, [out, retval] VARIANT_BOOL* Value1);
    [id(0x000000CE), helpstring("ѕодключить")]
    HRESULT _stdcall Open([out] BSTR* DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CF), helpstring("ќтключить")]
    HRESULT _stdcall Close([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D0), helpstring("“ест”стройства")]
    HRESULT _stdcall DeviceTest([out] BSTR* Description, [out] BSTR* DemoModeIsActivated, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D1), helpstring("ѕолучитьƒополнительныеƒействи€")]
    HRESULT _stdcall GetAdditionalActions([out] BSTR* TableActions, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D2), helpstring("¬ыполнитьƒополнительноеƒействие")]
    HRESULT _stdcall DoAdditionalAction([in] BSTR ActionName, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D3), helpstring("ќткрыть„ек")]
    HRESULT _stdcall OpenCheck([in] BSTR DeviceID, [in] VARIANT_BOOL IsFiscalCheck, [in] VARIANT_BOOL IsReturnCheck, [in] VARIANT_BOOL CancelOpenedCheck, [out] long* CheckNumber, [out] long* SessionNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D4), helpstring("Ќапечатать‘иск—троку")]
    HRESULT _stdcall PrintFiscalString([in] BSTR DeviceID, [in] BSTR Name, [in] double Quantity, [in] double Price, [in] double Amount, [in] long Department, [in] double Tax, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D5), helpstring("ЌапечататьЌефиск—троку")]
    HRESULT _stdcall PrintNonFiscalString([in] BSTR DeviceID, [in] BSTR TextString, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D6), helpstring("ЌапечататьЎтрих од")]
    HRESULT _stdcall PrintBarCode([in] BSTR DeviceID, [in] BSTR BarcodeType, [in] BSTR BarCode, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D7), helpstring("«акрыть„ек")]
    HRESULT _stdcall CloseCheck([in] BSTR DeviceID, [in] double Cash, [in] double PayByCard, [in] double PayByCredit, [in] double PayByCertificate, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D8), helpstring("ќтменить„ек")]
    HRESULT _stdcall CancelCheck([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D9), helpstring("Ќапечатать„ек¬несени€¬ыемки")]
    HRESULT _stdcall CashInOutcome([in] BSTR DeviceID, [in] double Amount, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DA), helpstring("ЌапечататьќтчетЅез√ашени€")]
    HRESULT _stdcall PrintXReport([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DB), helpstring("Ќапечататьќтчет—√ашением")]
    HRESULT _stdcall PrintZReport([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DC), helpstring("ќткрытьƒенежныйящик")]
    HRESULT _stdcall OpenCashDrawer([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DD), helpstring("ѕолучитьЎирину—троки")]
    HRESULT _stdcall GetLineLength([in] BSTR DeviceID, [out] long* LineLength, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DE)]
    HRESULT _stdcall SetLang([in] long LangID);
    [id(0x000000DF), helpstring("ќткрыть—мену")]
    HRESULT _stdcall OpenShift([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000E0), helpstring("Ќапечатать‘иск—троку2")]
    HRESULT _stdcall PrintFiscalString2([in] BSTR DeviceID, [in] BSTR Name, [in] double Quantity, [in] double Price, [in] double Amount, [in] long Department, [in] long Tax1, [in] long Tax2, [in] long Tax3, [in] long Tax4, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000E1), helpstring("ѕродолжитьѕечать")]
    HRESULT _stdcall ContinuePrinting([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000E2), helpstring("ѕроверить—осто€ниеѕечати")]
    HRESULT _stdcall CheckPrintingStatus([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000E3), helpstring("”правление”стройством’екс")]
    HRESULT _stdcall DeviceControlHEX([in] BSTR DeviceID, [in] BSTR TxData, [out] BSTR* RxData, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(E2A613DA-1844-42C1-9C48-4A13E6804A6C),
    version(1.0),
    helpstring("Dispatch interface for DrvFR1C17 Control"),
    dual,
    oleautomation
  ]
  interface IMitsu1C17: IDispatch
  {
    [id(0x000000C9), helpstring("ѕолучитьЌомер¬ерсии")]
    HRESULT _stdcall GetVersion([out, retval] BSTR* Value);
    [id(0x000000CA), helpstring("ѕолучитьќписание")]
    HRESULT _stdcall GetDescription([out] BSTR* Name, [out] BSTR* Description, [out] BSTR* EquipmentType, [out] long* InterfaceRevision, [out] VARIANT_BOOL* IntegrationLibrary, [out] VARIANT_BOOL* MainDriverInstalled, [out] BSTR* DownloadURL, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CB), helpstring("ѕолучитьќшибку")]
    HRESULT _stdcall GetLastError([out] BSTR* ErrorDescription, [out, retval] long* Value);
    [id(0x000000CC), helpstring("ѕолучитьѕараметры")]
    HRESULT _stdcall GetParameters([out] BSTR* TableParameters, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CD), helpstring("”становитьѕараметр")]
    HRESULT _stdcall SetParameter([in] BSTR Name, [in] VARIANT Value, [out, retval] VARIANT_BOOL* Value1);
    [id(0x000000CE), helpstring("ѕодключить")]
    HRESULT _stdcall Open([out] BSTR* DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CF), helpstring("ќтключить")]
    HRESULT _stdcall Close([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D0), helpstring("“ест”стройства")]
    HRESULT _stdcall DeviceTest([out] BSTR* Description, [out] BSTR* DemoModeIsActivated, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D1), helpstring("ѕолучитьƒополнительныеƒействи€")]
    HRESULT _stdcall GetAdditionalActions([out] BSTR* TableActions, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D2), helpstring("¬ыполнитьƒополнительноеƒействие")]
    HRESULT _stdcall DoAdditionalAction([in] BSTR ActionName, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D3), helpstring("ѕолучитьѕараметры  “")]
    HRESULT _stdcall GetDataKKT([in] BSTR DeviceID, [out] BSTR* TableParametersKKT, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D4), helpstring("ќпераци€‘Ќ")]
    HRESULT _stdcall OperationFN([in] BSTR DeviceID, [in] long OperationType, [in] BSTR CashierName, [in] BSTR ParametersFiscal, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D5), helpstring("ќткрыть—мену")]
    HRESULT _stdcall OpenShift([in] BSTR DeviceID, [in] BSTR CashierName, [out] long* SessionNumber, [out] long* DocumentNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D6), helpstring("«акрыть—мену")]
    HRESULT _stdcall CloseShift([in] BSTR DeviceID, [in] BSTR CashierName, [out] long* SessionNumber, [out] long* DocumentNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D7), helpstring("—формировать„ек")]
    HRESULT _stdcall ProcessCheck([in] BSTR DeviceID, [in] BSTR CashierName, [in] VARIANT_BOOL Electronically, [in] BSTR CheckPackage, [out] long* CheckNumber, [out] long* SessionNumber, [out] BSTR* FiscalSign, [out] BSTR* AddressSiteInspections, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D8), helpstring("—формировать„ек оррекции")]
    HRESULT _stdcall ProcessCorrectionCheck([in] BSTR DeviceID, [in] BSTR CashierName, [in] BSTR CheckCorrectionPackage, [out] long* CheckNumber, [out] long* SessionNumber, [out] BSTR* FiscalSign, [out] BSTR* AddressSiteInspections, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D9), helpstring("Ќапечатать„ек¬несени€¬ыемки")]
    HRESULT _stdcall CashInOutcome([in] BSTR DeviceID, [in] double Amount, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DA), helpstring("ѕолучить“екущее—осто€ние")]
    HRESULT _stdcall GetCurrentStatus([in] BSTR DeviceID, [out] long* CheckNumber, [out] long* SessionNumber, [out] long* SessionState, [out] BSTR* StatusParameters, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DB), helpstring("ќтчетќ“екущем—осто€нии–асчетов")]
    HRESULT _stdcall ReportCurrentStatusOfSettlements([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DC), helpstring("ќткрытьƒенежныйящик")]
    HRESULT _stdcall OpenCashDrawer([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DD), helpstring("ѕолучитьЎирину—троки")]
    HRESULT _stdcall GetLineLength([in] BSTR DeviceID, [out] long* LineLength, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DE), helpstring("Ќапечатать“екстовыйƒокумент")]
    HRESULT _stdcall PrintTextDocument([in] BSTR DeviceID, [in] BSTR DocumentPackage, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DF)]
    HRESULT _stdcall SetLang([in] long LangID);
    [id(0x000000E0), helpstring("ЌапечататьќтчетЅез√ашени€")]
    HRESULT _stdcall PrintXReport([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(46F19A5E-6E83-4448-B94B-02D5F0F64D9F),
    version(1.0),
    helpstring("Dispatch interface for DrvFR1C22 Object"),
    dual,
    oleautomation
  ]
  interface IMitsu1C22: IDispatch
  {
    [id(0x000000C9), helpstring("ѕолучитьЌомер¬ерсии")]
    HRESULT _stdcall GetVersion([out, retval] BSTR* Value);
    [id(0x000000CA), helpstring("ѕолучитьќписание")]
    HRESULT _stdcall GetDescription([out] BSTR* Name, [out] BSTR* Description, [out] BSTR* EquipmentType, [out] long* InterfaceRevision, [out] VARIANT_BOOL* IntegrationLibrary, [out] VARIANT_BOOL* MainDriverInstalled, [out] BSTR* DownloadURL, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CB), helpstring("ѕолучитьќшибку")]
    HRESULT _stdcall GetLastError([out] BSTR* ErrorDescription, [out, retval] long* Value);
    [id(0x000000CC), helpstring("ѕолучитьѕараметры")]
    HRESULT _stdcall GetParameters([out] BSTR* TableParameters, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CD), helpstring("”становитьѕараметр")]
    HRESULT _stdcall SetParameter([in] BSTR Name, [in] VARIANT Value, [out, retval] VARIANT_BOOL* Value1);
    [id(0x000000CE), helpstring("ѕодключить")]
    HRESULT _stdcall Open([out] BSTR* DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CF), helpstring("ќтключить")]
    HRESULT _stdcall Close([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D0), helpstring("“ест”стройства")]
    HRESULT _stdcall DeviceTest([out] BSTR* Description, [out] BSTR* DemoModeIsActivated, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D1), helpstring("ѕолучитьƒополнительныеƒействи€")]
    HRESULT _stdcall GetAdditionalActions([out] BSTR* TableActions, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D2), helpstring("¬ыполнитьƒополнительноеƒействие")]
    HRESULT _stdcall DoAdditionalAction([in] BSTR ActionName, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D3), helpstring("ѕолучитьѕараметры  “")]
    HRESULT _stdcall GetDataKKT([in] BSTR DeviceID, [out] BSTR* TableParametersKKT, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D4), helpstring("ќпераци€‘Ќ")]
    HRESULT _stdcall OperationFN([in] BSTR DeviceID, [in] long OperationType, [in] BSTR ParametersFiscal, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D5), helpstring("ќткрыть—мену")]
    HRESULT _stdcall OpenShift([in] BSTR DeviceID, [in] BSTR InputParameters, [out] BSTR* OutputParameters, [out] long* SessionNumber, [out] long* DocumentNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D6), helpstring("«акрыть—мену")]
    HRESULT _stdcall CloseShift([in] BSTR DeviceID, [in] BSTR InputParameters, [out] BSTR* OutputParameters, [out] long* SessionNumber, [out] long* DocumentNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D7), helpstring("—формировать„ек")]
    HRESULT _stdcall ProcessCheck([in] BSTR DeviceID, [in] VARIANT_BOOL Electronically, [in] BSTR CheckPackage, [out] long* CheckNumber, [out] long* SessionNumber, [out] BSTR* FiscalSign, [out] BSTR* AddressSiteInspections, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D8), helpstring("—формировать„ек оррекции")]
    HRESULT _stdcall ProcessCorrectionCheck([in] BSTR DeviceID, [in] BSTR CheckCorrectionPackage, [out] long* CheckNumber, [out] long* SessionNumber, [out] BSTR* FiscalSign, [out] BSTR* AddressSiteInspections, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D9), helpstring("Ќапечатать“екстовыйƒокумент")]
    HRESULT _stdcall PrintTextDocument([in] BSTR DeviceID, [in] BSTR DocumentPackage, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DA), helpstring("Ќапечатать„ек¬несени€¬ыемки")]
    HRESULT _stdcall CashInOutcome([in] BSTR DeviceID, [in] BSTR InputParameters, [in] double Amount, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DB), helpstring("ЌапечататьќтчетЅез√ашени€")]
    HRESULT _stdcall PrintXReport([in] BSTR DeviceID, [in] BSTR InputParameters, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DC), helpstring("ѕолучить“екущее—осто€ние")]
    HRESULT _stdcall GetCurrentStatus([in] BSTR DeviceID, [out] long* CheckNumber, [out] long* SessionNumber, [out] long* SessionState, [out] BSTR* StatusParameters, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DD), helpstring("ќтчетќ“екущем—осто€нии–асчетов")]
    HRESULT _stdcall ReportCurrentStatusOfSettlements([in] BSTR DeviceID, [in] BSTR InputParameters, [out] BSTR* OutputParameters, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DE), helpstring("ќткрытьƒенежныйящик")]
    HRESULT _stdcall OpenCashDrawer([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DF), helpstring("ѕолучитьЎирину—троки")]
    HRESULT _stdcall GetLineLength([in] BSTR DeviceID, [out] long* LineLength, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000E0)]
    HRESULT _stdcall SetLang([in] long LangID);
  };

  [
    uuid(1CD466C1-DACD-47F0-BCBC-3897881C67A9),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IMitsu1C30: IDispatch
  {
    [id(0x000000C9), helpstring("ѕолучить–евизию»нтерфейса")]
    HRESULT _stdcall GetInterfaceRevision([out, retval] long* Value);
    [id(0x000000CA), helpstring("ѕолучитьќписание")]
    HRESULT _stdcall GetDescription([out] BSTR* DriverDescription, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CB), helpstring("ѕолучитьќшибку")]
    HRESULT _stdcall GetLastError([out] BSTR* ErrorDescription, [out, retval] long* Value);
    [id(0x000000CC), helpstring("ѕолучитьѕараметры")]
    HRESULT _stdcall GetParameters([out] BSTR* TableParameters, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CD), helpstring("”становитьѕараметр")]
    HRESULT _stdcall SetParameter([in] BSTR Name, [in] VARIANT Value, [out, retval] VARIANT_BOOL* Value1);
    [id(0x000000CE), helpstring("ѕодключить")]
    HRESULT _stdcall Open([out] BSTR* DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CF), helpstring("ќтключить")]
    HRESULT _stdcall Close([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D0), helpstring("“ест”стройства")]
    HRESULT _stdcall DeviceTest([out] BSTR* Description, [out] BSTR* DemoModeIsActivated, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D1), helpstring("ѕолучитьƒополнительныеƒействи€")]
    HRESULT _stdcall GetAdditionalActions([out] BSTR* TableActions, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D2), helpstring("¬ыполнитьƒополнительноеƒействие")]
    HRESULT _stdcall DoAdditionalAction([in] BSTR ActionName, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D3), helpstring("ѕолучитьѕараметры  “")]
    HRESULT _stdcall GetDataKKT([in] BSTR DeviceID, [out] BSTR* TableParametersKKT, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D4), helpstring("ќпераци€‘Ќ")]
    HRESULT _stdcall OperationFN([in] BSTR DeviceID, [in] long OperationType, [in] BSTR ParametersFiscal, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D5), helpstring("ќткрыть—мену")]
    HRESULT _stdcall OpenShift([in] BSTR DeviceID, [in] BSTR InputParameters, [out] BSTR* OutputParameters, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D6), helpstring("«акрыть—мену")]
    HRESULT _stdcall CloseShift([in] BSTR DeviceID, [in] BSTR InputParameters, [out] BSTR* OutputParameters, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D7), helpstring("—формировать„ек")]
    HRESULT _stdcall ProcessCheck([in] BSTR DeviceID, [in] VARIANT_BOOL Electronically, [in] BSTR CheckPackage, [out] BSTR* DocumentOutputParameters, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D8), helpstring("—формировать„ек оррекции")]
    HRESULT _stdcall ProcessCorrectionCheck([in] BSTR DeviceID, [in] BSTR CheckPackage, [out] BSTR* DocumentOutputParameters, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DA), helpstring("Ќапечатать„ек¬несени€¬ыемки")]
    HRESULT _stdcall CashInOutcome([in] BSTR DeviceID, [in] BSTR InputParameters, [in] double Amount, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DB), helpstring("ЌапечататьќтчетЅез√ашени€")]
    HRESULT _stdcall PrintXReport([in] BSTR DeviceID, [in] BSTR InputParameters, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DC), helpstring("ѕолучить“екущее—осто€ние")]
    HRESULT _stdcall GetCurrentStatus([in] BSTR DeviceID, [in] BSTR InputParameters, [out] BSTR* OutputParameters, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DD), helpstring("ќтчетќ“екущем—осто€нии–асчетов")]
    HRESULT _stdcall ReportCurrentStatusOfSettlements([in] BSTR DeviceID, [in] BSTR InputParameters, [out] BSTR* OutputParameters, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DE), helpstring("ќткрытьƒенежныйящик")]
    HRESULT _stdcall OpenCashDrawer([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DF), helpstring("ѕолучитьЎирину—троки")]
    HRESULT _stdcall GetLineLength([in] BSTR DeviceID, [out] long* LineLength, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000E0), helpstring("Ќапечатать опию„ека")]
    HRESULT _stdcall PrintCheckCopy([in] BSTR DeviceID, [in] BSTR CheckNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000E1), helpstring("Ќапечатать“екстовыйƒокумент")]
    HRESULT _stdcall PrintTextDocument([in] BSTR DeviceID, [in] BSTR DocumentPackage, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall sm_FormatVersion([out, retval] long* Value);
    [propput, id(0x000000D9)]
    HRESULT _stdcall sm_FormatVersion([in] long Value);
    [id(0x000000E2), helpstring("ќткрыть—ессию–егистрации ћ")]
    HRESULT _stdcall OpenSessionRegistrationKM([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000E3), helpstring("«акрыть—ессию–егистрации ћ")]
    HRESULT _stdcall CloseSessionRegistrationKM([in] BSTR DeviceID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000E4), helpstring("«апрос ћ")]
    HRESULT _stdcall RequestKM([in] BSTR DeviceID, [in] BSTR RequestKM, [out] BSTR* RequestKMResult, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000E5), helpstring("ѕолучить–езультаты«апроса ћ")]
    HRESULT _stdcall GetProcessingKMResult([in] BSTR DeviceID, [out] BSTR* ProcessingKMResult, [out] long* RequestStatus, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000E6), helpstring("ѕодтвердить ћ")]
    HRESULT _stdcall ConfirmKM([in] BSTR DeviceID, [in] BSTR RequestGUID, [in] long ConfirmationType, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000E7), helpstring("ѕолучитьЎаблонЋокализации")]
    HRESULT _stdcall GetLocalizationPattern([out] BSTR* LocalizationPattern, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000E8), helpstring("”становитьЋокализацию ")]
    HRESULT _stdcall SetLocalization([in] BSTR LanguageCode, [in] BSTR LocalizationPattern, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(0BFF23D1-7C0E-4D32-A52B-DBA98C86F76C),
    version(1.0),
    helpstring("MITSU 1-F 1C driver")
  ]
  coclass Mitsu1C
  {
    [default] interface IMitsu1C;
  };

  [
    uuid(9042D8E2-BAC1-4060-B58E-5CA5D67FE23C),
    version(1.0),
    helpstring("MITSU 1-F 1C driver")
  ]
  coclass Mitsu1C11
  {
    [default] interface IMitsu1C11;
  };

  [
    uuid(5E687886-93E8-4761-83E6-F255E02EDF14),
    version(1.0),
    helpstring("MITSU 1-F 1C driver")
  ]
  coclass Mitsu1C17
  {
    [default] interface IMitsu1C17;
  };

  [
    uuid(6E7FA51F-510C-47FC-9BA5-EC5A30B490A0),
    version(1.0),
    helpstring("MITSU 1-F 1C driver")
  ]
  coclass Mitsu1C22
  {
    [default] interface IMitsu1C22;
  };

  [
    uuid(2A26DE93-F367-4CE8-95E3-51C539978AC8),
    version(1.0),
    helpstring("MITSU 1-F 1C driver"),
    control
  ]
  coclass Mitsu1C30
  {
    [default] interface IMitsu1C30;
  };

};
